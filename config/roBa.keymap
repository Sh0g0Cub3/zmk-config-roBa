#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        ime {
            bindings = <&kp LC(SPACE)>;
            key-positions = <18 19>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <30 31>;
            layers = <0 2>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <31 32>;
            layers = <0 2>;
        };

        question {
            bindings = <&kp LS(SLASH)>;
            key-positions = <32 33>;
        };

        switcher {
            bindings = <&kp LA(LG(TAB))>;
            key-positions = <8 9>;
        };

        code_block {
            bindings = <&code_block>;
            key-positions = <14 15>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "CODE_BLOCK";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        square_brackets: square_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "SQUARE_BRACKETS";
        };

        curly_braces: curly_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LS(LEFT_BRACKET) &kp LS(RIGHT_BRACKET) &kp LEFT_ARROW>;
            label = "CURLY_BRACES";
        };

        at_mark: at_mark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp AT_SIGN>;
            label = "AT_MARK";
        };

        corner_brackets: corner_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LBKT &kp RIGHT_BRACKET &kp ENTER &kp LEFT_ARROW>;
            label = "CORNER_BRACKETS";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R      &kp T                                                       &kp Y        &kp U  &kp I      &kp O      &kp P
&kp A      &kp S         &kp D         &kp F      &kp G  &mt LEFT_ALT ESCAPE                  &kp LEFT_ALT    &kp H        &kp J  &kp K      &kp L      &lt 6 SEMICOLON
&kp Z      &kp X         &kp C         &kp V      &kp B  &mt LEFT_SHIFT LS(LG(NUMBER_9))      &mo 4           &kp N        &kp M  &mkp LCLK  &mkp RCLK  &lt 5 SLASH
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 TAB  &mo 3  &lt 5 SPACE                          &kp LEFT_SHIFT  &lt 2 ENTER                               &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Mouse {
            bindings = <
&kp LS(LG(NUMBER_3))  &none   &none   &none                  &kp LS(LG(T))                                    &none                  &none  &none  &none  &none
&none                 &none   &none   &kp LS(LA(LC(SPACE)))  &none          &trans      &trans                &none                  &none  &none  &none  &none
&none                 &none   &none   &kp LS(LG(V))          &none          &trans      &trans                &none                  &none  &none  &none  &none
&trans                &trans  &trans  &none                  &none          &none       &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)                       &trans
            >;
        };

        Arrow {
            bindings = <
&kp N1        &kp N2                    &kp N3             &kp N4                     &kp N5                                                         &kp N6            &kp N7                  &kp N8                   &kp N9            &kp N0
&kp C_VOL_DN  &kp LC(LG(LEFT_BRACKET))  &kp LC(LG(SPACE))  &kp LC(LG(RIGHT_BRACKET))  &kp C_VOLUME_UP  &kp SLASH                         &kp PERIOD  &kp LEFT          &kp DOWN                &kp UP                   &kp RIGHT         &kp HOME
&none         &none                     &kp LG(NUMBER_0)   &kp LG(MINUS)              &kp LG(EQUAL)    &mt LEFT_SHIFT LS(SEMICOLON)      &kp COMMA   &kp LG(NUMBER_1)  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(RIGHT_ARROW))  &kp LG(NUMBER_9)  &kp END
&trans        &trans                    &trans             &trans                     &trans           &trans                            &trans      &trans                                                                               &trans
            >;
        };

        Symbol {
            bindings = <
&kp LS(TILDE)         &kp LS(DLLR)      &kp LS(POUND)  &at_mark      &kp LS(EXCL)                                 &parentheses      &kp SQT           &kp BSLH      &kp FSLH    &kp LS(COLON)
&kp LS(PRCNT)         &kp LS(CARET)     &kp LS(AMPS)   &kp LS(STAR)  &kp LS(UNDER)  &kp GRAVE      &kp DOT        &square_brackets  &kp LS(SQT)       &kp LS(PIPE)  &none       &kp SEMI
&kp LS(SINGLE_QUOTE)  &kp SINGLE_QUOTE  &kp EQUAL      &kp LS(PLUS)  &kp MINUS      &trans         &kp COMMA      &curly_braces     &corner_brackets  &kp LS(LT)    &kp LS(GT)  &kp LS(QMARK)
&trans                &trans            &trans         &trans        &trans         &trans         &kp LA(ENTER)  &kp LS(ENTER)                                                 &trans
            >;
        };

        Function {
            bindings = <
&kp LC(LG(P))  &none          &none          &none          &none                                                &kp F1         &kp F2   &kp F3   &kp F4   &kp LC(LG(P))
&none          &kp LC(LG(S))  &none          &kp LC(LG(F))  &none          &none                  &none          &kp F5         &kp F6   &kp F7   &kp F8   &none
&none          &none          &kp LC(LG(C))  &kp LC(LG(V))  &kp LC(LG(B))  &kp LS(LC(LG(B)))      &none          &kp F9         &kp F10  &kp F11  &kp F12  &none
&trans         &trans         &trans         &trans         &trans         &trans                 &kp LG(SPACE)  &kp LA(SPACE)                             &trans
            >;
        };

        Display {
            bindings = <
&kp LA(LC(G))  &kp LA(LC(N))      &kp LA(LC(C))      &kp LA(LC(E))      &kp LA(LC(M))                                              &kp LC(UP_ARROW)        &kp LC(LG(U))       &kp LC(LG(I))  &none                    &none
&kp LA(LC(A))  &kp LA(LC(T))      &kp LA(LC(S))      &kp LA(LC(B))      &kp LA(LC(F))      &kp LS(LC(LG(D)))      &kp LA(LC(TAB))  &kp LC(LG(LEFT_ARROW))  &kp LC(LG(J))       &kp LC(LG(K))  &kp LC(LG(RIGHT_ARROW))  &none
&none          &kp LS(LA(LC(F)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(P)))  &kp LS(LA(LC(D)))  &kp LS(LC(LG(J)))      &kp LC(LG(T))    &kp LC(LG(COMMA))       &kp LC(LG(PERIOD))  &none          &none                    &none
&trans         &trans             &trans             &trans             &trans             &trans                 &trans           &kp LC(LG(ENTER))                                                                   &trans
            >;
        };

        Bluetooth {
            bindings = <
&none  &none         &none         &none         &none                          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none         &none         &none         &none  &none      &none        &none         &none         &none         &none         &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none      &bootloader  &none         &none         &none         &none         &bt BT_CLR
&none  &none         &none         &none         &none  &none      &none        &none                                                   &bt BT_CLR_ALL
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };
    };
};
